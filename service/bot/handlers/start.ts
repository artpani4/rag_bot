import { Context } from "@grammy";
import { upsertUser } from "../../db/supabase.ts";
import { verdict } from "$shared";
import luminous from "$luminous";

const log = new luminous.Logger(
  new luminous.OptionsBuilder().setName("START_HANDLER").build(),
);

export async function startHandler(ctx: Context) {
  const user = ctx.from;
  if (!user) {
    log.err("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ctx.from –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
    await ctx.reply("‚õîÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    return;
  }

  // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
  log.inf(`–ó–∞–ø—É—Å–∫ startHandler –¥–ª—è user_id=${user.id}`);
  log.trc(`ctx.from: ${JSON.stringify(user, null, 2)}`);

  const userData = {
    telegram_id: user.id,
    username: user.username ?? null,
    first_name: user.first_name ?? null,
    last_name: user.last_name ?? null,
    language_code: user.language_code ?? null,
    is_bot: user.is_bot ?? null,
    is_premium: (user as any).is_premium ?? null,
  };

  log.inf(`–ü—Ä–æ–±—É–µ–º upsertUser —Å userData: ${JSON.stringify(userData)}`);

  const res = await upsertUser(userData);

  verdict.match(res, {
    ok: async (userObj) => {
      log.inf(`‚úÖ User upsert —É—Å–ø–µ—à–µ–Ω: telegram_id=${userObj.telegram_id}`);
      log.trc(`User –∏–∑ –±–∞–∑—ã: ${JSON.stringify(userObj)}`);
      await ctx.reply(
        `üëã –ü—Ä–∏–≤–µ—Ç, ${
          userObj.first_name || userObj.username || "–¥—Ä—É–≥"
        }! –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.`,
      );
    },
    err: async (errMsg) => {
      log.err(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ upsertUser: ${errMsg}`);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    },
  });
}
