// service/bot/handlers/import_worker.ts

import { ChatData } from "../../../types.ts";
import { config, embedText } from "$shared";
import { upsert } from "../../db/qdrant.ts";
import luminous from "$luminous";
import { Api, RawApi } from "@grammy";

const log = new luminous.Logger(
  new luminous.OptionsBuilder().setName("IMPORT_WORKER").build(),
);

export async function processChatImport(
  chatId: number,
  fileUrl: string,
  api: Api<RawApi>,
) {
  // –°–∫–∞—á–∏–≤–∞–µ–º
  let jsonStr: string;
  try {
    jsonStr = await (await fetch(fileUrl)).text();
    log.trc("–§–∞–π–ª —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä " + jsonStr.length + " bytes");
  } catch (e) {
    log.err("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: " + e);
    await api.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.");
    return;
  }

  // –ü–∞—Ä—Å–∏–º
  let chatData: ChatData;
  try {
    chatData = JSON.parse(jsonStr);
  } catch (e) {
    log.err("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: " + e);
    await api.sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON.");
    return;
  }

  if (!Array.isArray(chatData.messages)) {
    log.err("–ù–µ—Ç –ø–æ–ª—è messages");
    await api.sendMessage(chatId, "‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ—Ç –º–∞—Å—Å–∏–≤–∞ messages.");
    return;
  }

  log.inf(`–í —Ñ–∞–π–ª–µ ${chatData.messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);

  const plainMessages = chatData.messages.filter(
    (m) =>
      m.type === "message" &&
      typeof m.text === "string" &&
      m.text.trim().length > 0,
  );

  if (!plainMessages.length) {
    return api.sendMessage(chatId, "–í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.");
  }

  if (plainMessages.length > 10000) {
    return api.sendMessage(chatId, "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π (>10000).");
  }

  await api.sendMessage(
    chatId,
    `üìä –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ${plainMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π...`,
  );
  log.inf("–ù–∞—á–∏–Ω–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –∏ –∏–º–ø–æ—Ä—Ç");

  const BATCH_SIZE = 32;
  let ok = 0, errors = 0;
  const batches = Math.ceil(plainMessages.length / BATCH_SIZE);

  for (let i = 0; i < plainMessages.length; i += BATCH_SIZE) {
    const batch = plainMessages.slice(i, i + BATCH_SIZE);
    log.inf(`–ë–∞—Ç—á ${i / BATCH_SIZE + 1} –∏–∑ ${batches}, size=${batch.length}`);

    const texts = batch.map((m) => m.text);
    let vectors: number[][];

    try {
      vectors = await embedText(texts);
    } catch (e) {
      log.err("–û—à–∏–±–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: " + e);
      errors += batch.length;
      continue;
    }

    const points = batch.map((msg, idx) => ({
      id: Number(msg.id),
      vector: vectors[idx],
      payload: {
        text: msg.text,
        date: msg.date,
        from: msg.from,
        chat_id: chatData.id,
        meta: msg,
      },
    }));

    try {
      await upsert("chat_" + chatData.id, points);
      ok += points.length;
    } catch (e) {
      log.err("–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ Qdrant: " + e);
      errors += points.length;
    }

    if ((i / BATCH_SIZE) % 5 === 0) {
      await api.sendMessage(chatId, `‚è≥ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${ok} —Å–æ–æ–±—â–µ–Ω–∏–π...`);
    }
  }

  await api.sendMessage(
    chatId,
    `‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –£—Å–ø–µ—à–Ω–æ: ${ok}, –æ—à–∏–±–æ–∫: ${errors}`,
  );
  log.inf(`–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: —É—Å–ø–µ—à–Ω–æ=${ok}, –æ—à–∏–±–æ–∫=${errors}`);
}
